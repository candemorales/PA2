
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 16 21:06:10 PST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Thu Nov 16 21:06:10 PST 2017
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\010\000\002\005\012" +
    "\000\002\006\002\000\002\006\003\000\002\006\004\000" +
    "\002\010\003\000\002\010\014\000\002\010\010\000\002" +
    "\010\004\000\002\014\002\000\002\014\003\000\002\014" +
    "\005\000\002\015\004\000\002\015\005\000\002\015\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\012\000" +
    "\002\013\010\000\002\013\004\000\002\013\004\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\004\000\002\013\004\000\002\013\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\120\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\010\003\015\051\ufffb\056\017" +
    "\001\002\000\004\055\013\001\002\000\004\050\014\001" +
    "\002\000\010\003\015\051\ufffb\056\017\001\002\000\004" +
    "\043\114\001\002\000\010\003\ufffa\051\ufffa\056\ufffa\001" +
    "\002\000\006\044\025\045\026\001\002\000\010\003\015" +
    "\051\023\056\017\001\002\000\010\003\ufff8\051\ufff8\056" +
    "\ufff8\001\002\000\010\003\ufff9\051\ufff9\056\ufff9\001\002" +
    "\000\004\043\024\001\002\000\006\002\ufffc\004\ufffc\001" +
    "\002\000\004\055\110\001\002\000\002\001\002\000\004" +
    "\046\030\001\002\000\004\044\031\001\002\000\004\055" +
    "\032\001\002\000\004\050\033\001\002\000\024\024\035" +
    "\025\040\027\043\041\044\045\045\052\036\053\034\054" +
    "\037\056\041\001\002\000\026\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\040\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0\051" +
    "\uffe0\001\002\000\004\055\107\001\002\000\026\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\040\uffdf\042\uffdf\043\uffdf\046" +
    "\uffdf\047\uffdf\051\uffdf\001\002\000\026\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\040\uffde\042\uffde\043\uffde\046\uffde\047" +
    "\uffde\051\uffde\001\002\000\024\024\035\025\040\027\043" +
    "\041\044\045\045\052\036\053\034\054\037\056\041\001" +
    "\002\000\030\026\103\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\040\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\051\uffe1\001" +
    "\002\000\020\032\052\033\054\034\053\035\051\040\055" +
    "\047\047\051\101\001\002\000\024\024\035\025\040\027" +
    "\043\041\044\045\045\052\036\053\034\054\037\056\041" +
    "\001\002\000\024\024\035\025\040\027\043\041\044\045" +
    "\045\052\036\053\034\054\037\056\041\001\002\000\024" +
    "\024\035\025\040\027\043\041\044\045\045\052\036\053" +
    "\034\054\037\056\041\001\002\000\020\032\052\033\054" +
    "\034\053\035\051\040\055\046\050\047\047\001\002\000" +
    "\004\055\071\001\002\000\026\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\040\uffe2\042\uffe2\043\uffe2\046\uffe2\047\uffe2\051" +
    "\uffe2\001\002\000\024\024\035\025\040\027\043\041\044" +
    "\045\045\052\036\053\034\054\037\056\041\001\002\000" +
    "\024\024\035\025\040\027\043\041\044\045\045\052\036" +
    "\053\034\054\037\056\041\001\002\000\024\024\035\025" +
    "\040\027\043\041\044\045\045\052\036\053\034\054\037" +
    "\056\041\001\002\000\024\024\035\025\040\027\043\041" +
    "\044\045\045\052\036\053\034\054\037\056\041\001\002" +
    "\000\004\056\056\001\002\000\004\045\057\001\002\000" +
    "\030\024\035\025\040\027\043\041\044\042\ufff4\045\045" +
    "\046\ufff4\052\036\053\034\054\037\056\041\001\002\000" +
    "\006\042\062\046\063\001\002\000\022\032\052\033\054" +
    "\034\053\035\051\040\055\042\ufff3\046\ufff3\047\047\001" +
    "\002\000\024\024\035\025\040\027\043\041\044\045\045" +
    "\052\036\053\034\054\037\056\041\001\002\000\026\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\040\uffeb\042\uffeb\043\uffeb" +
    "\046\uffeb\047\uffeb\051\uffeb\001\002\000\022\032\052\033" +
    "\054\034\053\035\051\040\055\042\ufff2\046\ufff2\047\047" +
    "\001\002\000\026\032\uffe5\033\uffe5\034\uffe5\035\uffe5\040" +
    "\055\042\uffe5\043\uffe5\046\uffe5\047\047\051\uffe5\001\002" +
    "\000\026\032\uffe7\033\054\034\uffe7\035\051\040\055\042" +
    "\uffe7\043\uffe7\046\uffe7\047\047\051\uffe7\001\002\000\026" +
    "\032\uffe8\033\054\034\uffe8\035\051\040\055\042\uffe8\043" +
    "\uffe8\046\uffe8\047\047\051\uffe8\001\002\000\026\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\040\055\042\uffe6\043\uffe6\046" +
    "\uffe6\047\047\051\uffe6\001\002\000\004\040\072\001\002" +
    "\000\004\056\073\001\002\000\004\045\074\001\002\000" +
    "\030\024\035\025\040\027\043\041\044\042\ufff4\045\045" +
    "\046\ufff4\052\036\053\034\054\037\056\041\001\002\000" +
    "\006\042\062\046\076\001\002\000\026\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\040\uffec\042\uffec\043\uffec\046\uffec\047" +
    "\uffec\051\uffec\001\002\000\026\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\040\055\042\uffe4\043\uffe4\046\uffe4\047\047\051" +
    "\uffe4\001\002\000\026\032\052\033\054\034\053\035\051" +
    "\040\055\042\uffe3\043\uffe3\046\uffe3\047\047\051\uffe3\001" +
    "\002\000\004\043\102\001\002\000\010\003\ufff7\051\ufff7" +
    "\056\ufff7\001\002\000\026\003\104\024\035\025\040\027" +
    "\043\041\044\045\045\052\036\053\034\054\037\056\041" +
    "\001\002\000\026\032\uffed\033\uffed\034\uffed\035\uffed\040" +
    "\uffed\042\uffed\043\uffed\046\uffed\047\uffed\051\uffed\001\002" +
    "\000\026\032\052\033\054\034\053\035\051\040\055\042" +
    "\uffee\043\uffee\046\uffee\047\047\051\uffee\001\002\000\026" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\040\055\042\uffe9\043" +
    "\uffe9\046\uffe9\047\047\051\uffe9\001\002\000\026\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\040\uffea\042\uffea\043\uffea\046" +
    "\uffea\047\uffea\051\uffea\001\002\000\004\026\111\001\002" +
    "\000\024\024\035\025\040\027\043\041\044\045\045\052" +
    "\036\053\034\054\037\056\041\001\002\000\020\032\052" +
    "\033\054\034\053\035\051\040\055\043\113\047\047\001" +
    "\002\000\010\003\ufff6\051\ufff6\056\ufff6\001\002\000\010" +
    "\003\ufff5\051\ufff5\056\ufff5\001\002\000\010\003\015\051" +
    "\116\056\017\001\002\000\004\043\117\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\004\002\000\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\003\004\004\003\005\005\001\001\000" +
    "\004\005\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\114\010" +
    "\015\017\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\017\010\015\017\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\021" +
    "\017\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\077\001\001\000\004\013" +
    "\076\001\001\000\004\013\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\067\001" +
    "\001\000\004\013\066\001\001\000\004\013\065\001\001" +
    "\000\004\013\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\060\014\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\060\014\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\021\017\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {



    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= BOOL_CONST 
            {
              Expression RESULT = null;
		Boolean bcst = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new bool_const(curr_lineno(),bcst); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= STR_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol scst = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new string_const(curr_lineno(),AbstractTable.idtable.addString(scst.getString())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= INT_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol icst = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new int_const(curr_lineno(), AbstractTable.idtable.addString(icst.getString())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= OBJECTID 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new object(curr_lineno(),AbstractTable.idtable.addString(oid.getString())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new comp(curr_lineno(),e1); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= NEG expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new neg(curr_lineno(),e1); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new divide(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new mul(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new sub(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new plus(curr_lineno(),e1,e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ISVOID expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new isvoid(curr_lineno(),e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= NEW TYPEID 
            {
              Expression RESULT = null;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new new_(curr_lineno(), tid); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr DOT OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions e2 = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT=new dispatch(curr_lineno(), e1, o, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions elist = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(),e, tid, oid, elist); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= OBJECTID ASSIGN error 
            {
              Expression RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new assign(curr_lineno(), oid, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressions ::= error SEMI 
            {
              Expressions RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expressions*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressions ::= expressions expr SEMI 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT=el.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expressions*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expressions ::= expr SEMI 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT=(new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expressions*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr_list ::= expr_list COMMA expr 
            {
              Expressions RESULT = null;
		Expressions exl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = exl.appendElement(e1);
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr_list ::= expr 
            {
              Expressions RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e1); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr_list ::= 
            {
              Expressions RESULT = null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= error SEMI 
            {
              Feature RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), oid, tid, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID LPAREN formals_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol oid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals f1 = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol tid = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), oid, f1, tid, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= attribute 
            {
              Feature RESULT = null;
		attr a = (attr)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT=a; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature_list ::= feature_list feature 
            {
              Features RESULT = null;
		Features f1 = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f2 = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = f1.appendElement(f2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= feature 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new Features(curr_lineno()).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n,
		                   AbstractTable.idtable.addString("Object"),
				   f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

